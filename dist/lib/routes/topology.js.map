{"version":3,"sources":["../src/lib/routes/topology.ts"],"names":["router","express","Router","Topology","require","Instance","route","get","req","res","read","then","results","status","send","query","id","readOne","result","topology","params","region","GetInstancesFromEC2","Name","Values","deployment","environment","records","catch","err","console","log","module","exports"],"mappings":";;AAAA;;;;;;AAEA,MAAMA,MAAM,GAAGC,kBAAQC,MAAR,EAAf;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,yBAAD,CAAxB;;AAEAJ,MAAM,CAACM,KAAP,CAAa,uCAAb,EAAsDC,GAAtD,CAA0D,CAACC,GAAD,EAAMC,GAAN,KAAa;AACnEJ,EAAAA,QAAQ,CAACK,IAAT,GAAgBC,IAAhB,CAAqBC,OAAO,IAAG;AAC3BH,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,OAArB;AACH,GAFD;AAGH,CAJD;AAMAZ,MAAM,CAACM,KAAP,CAAa,0CAAb,EAAyDC,GAAzD,CAA6D,CAACC,GAAD,EAAMC,GAAN,KAAa;AACtE,MAAID,GAAG,CAACO,KAAJ,CAAUC,EAAd,EAAkB;AACdX,IAAAA,QAAQ,CAACY,OAAT,CAAiBT,GAAG,CAACO,KAAJ,CAAUC,EAA3B,EAA+BL,IAA/B,CAAoCO,MAAM,IAAG;AACzCT,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,MAArB;AACH,KAFD;AAGH,GAJD,MAIO;AACHT,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjB,gBAAU,aADO;AAEjB,gBAAU;AAFO,KAArB;AAIH;AACJ,CAXD;AAaAd,MAAM,CAACM,KAAP,CAAa,0CAAb,EAAyDC,GAAzD,CAA6D,CAACC,GAAD,EAAMC,GAAN,KAAa;AACtE,QAAMU,QAAQ,GAAG,IAAIhB,QAAJ,CAAaK,GAAG,CAACY,MAAJ,CAAWC,MAAxB,CAAjB;AACAF,EAAAA,QAAQ,CAACG,mBAAT,CAA6B;AAACC,IAAAA,IAAI,EAAE,qBAAP;AAA8BC,IAAAA,MAAM,EAAE,CAAChB,GAAG,CAACY,MAAJ,CAAWK,UAAZ;AAAtC,GAA7B,EAA6F;AAACF,IAAAA,IAAI,EAAE,sBAAP;AAA+BC,IAAAA,MAAM,EAAE,CAAChB,GAAG,CAACY,MAAJ,CAAWM,WAAZ;AAAvC,GAA7F,EACCf,IADD,CACMgB,OAAO,IAAG;AACZlB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBa,OAArB;AACH,GAHD,EAICC,KAJD,CAIOC,GAAG,IAAG;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACApB,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX;AACH,GAPD;AAQH,CAVD;AAYAmB,MAAM,CAACC,OAAP,GAAiBjC,MAAjB","file":"topology.js","sourcesContent":["import express from 'express'\n\nconst router = express.Router()\n\nconst Topology = require('../controllers/topology')\nconst Instance = require('../controllers/instance')\n\nrouter.route('/:region/:environment/:deployment/get').get((req, res) => {\n    Instance.read().then(results => {\n        res.status(200).send(results)\n    })\n})\n\nrouter.route('/:region/:environment/:deployment/search').get((req, res) => {\n    if (req.query.id) {\n        Instance.readOne(req.query.id).then(result => {\n            res.status(200).send(result)\n        })\n    } else {\n        res.status(400).send({\n            \"status\": \"no_response\",\n            \"reason\": \"bad_query_parameters\"\n        })\n    }\n})\n\nrouter.route('/:region/:environment/:deployment/update').get((req, res) => {\n    const topology = new Topology(req.params.region)\n    topology.GetInstancesFromEC2({Name: 'tag:Evnt_Deployment', Values: [req.params.deployment]}, {Name: 'tag:Evnt_Environment', Values: [req.params.environment]})\n    .then(records => {\n        res.status(200).send(records)\n    })\n    .catch(err => {\n        console.log(err)\n        res.status(500)\n    })\n})\n\nmodule.exports = router"]}