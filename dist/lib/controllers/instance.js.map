{"version":3,"sources":["../src/lib/controllers/instance.ts"],"names":["Models","require","module","exports","create","request","Promise","resolve","result","default","Instance","state","State","launch_time","LaunchTime","public_ipv4","PublicIpAddress","instance_id","InstanceId","key_name","KeyName","public_dns","PublicDnsName","instance_profile_arn","IamInstanceProfile","Arn","security_groups","SecurityGroups","read","findAll","order","readOne","id","findByPk"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAGC,OAAD,IAAY;AAChB,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;AACzB,YAAMC,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,QAAf,CAAwBN,MAAxB,CAA+B;AAC1CO,QAAAA,KAAK,EAAEN,OAAO,CAACO,KAD2B;AAE1CC,QAAAA,WAAW,EAAER,OAAO,CAACS,UAFqB;AAG1CC,QAAAA,WAAW,EAAEV,OAAO,CAACW,eAHqB;AAI1CC,QAAAA,WAAW,EAAEZ,OAAO,CAACa,UAJqB;AAK1CC,QAAAA,QAAQ,EAAEd,OAAO,CAACe,OALwB;AAM1CC,QAAAA,UAAU,EAAEhB,OAAO,CAACiB,aANsB;AAO1CC,QAAAA,oBAAoB,EAAElB,OAAO,CAACmB,kBAAR,CAA2BC,GAPP;AAQ1CC,QAAAA,eAAe,EAAErB,OAAO,CAACsB;AARiB,OAA/B,CAAf;AAUApB,MAAAA,OAAO,CAACC,MAAD,CAAP;AACH,KAZM,CAAP;AAaH,GAfY;AAiBboB,EAAAA,IAAI,EAAE,MAAK;AACP,WAAO,IAAItB,OAAJ,CAAYC,OAAO,IAAG;AACzB,YAAMC,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,QAAf,CAAwBmB,OAAxB,CAAgC;AAC3CC,QAAAA,KAAK,EAAE,CAAC,CAAC,aAAD,EAAgB,MAAhB,CAAD;AADoC,OAAhC,CAAf;AAGAvB,MAAAA,OAAO,CAACC,MAAD,CAAP;AACH,KALM,CAAP;AAMH,GAxBY;AA0BbuB,EAAAA,OAAO,EAAGC,EAAD,IAAO;AACZ,WAAO,IAAI1B,OAAJ,CAAYC,OAAO,IAAG;AACzB,YAAMC,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,QAAf,CAAwBuB,QAAxB,CAAiCD,EAAjC,CAAf;AACAzB,MAAAA,OAAO,CAACC,MAAD,CAAP;AACH,KAHM,CAAP;AAIH;AA/BY,CAAjB","file":"instance.js","sourcesContent":["const Models = require('../models/')\n\nmodule.exports = {\n    create: (request) => {\n        return new Promise(resolve => {\n            const result = Models.default.Instance.create({\n                state: request.State,\n                launch_time: request.LaunchTime,\n                public_ipv4: request.PublicIpAddress,\n                instance_id: request.InstanceId,\n                key_name: request.KeyName,\n                public_dns: request.PublicDnsName,\n                instance_profile_arn: request.IamInstanceProfile.Arn,\n                security_groups: request.SecurityGroups\n            })\n            resolve(result)\n        })\n    },\n\n    read: () => {\n        return new Promise(resolve => {\n            const result = Models.default.Instance.findAll({\n                order: [['launch_time', 'DESC']]\n            })\n            resolve(result)\n        })\n    },\n\n    readOne: (id) => {\n        return new Promise(resolve => {\n            const result = Models.default.Instance.findByPk(id)\n            resolve(result)\n        })\n    }\n}"]}