{"version":3,"sources":["../src/lib/controllers/topology.ts"],"names":["instanceController","require","Topology","constructor","region","GetInstancesFromEC2","kv","params","Filters","forEach","pair","push","Promise","resolve","reject","ec2","describeInstances","err","data","Reservations","length","instances","reservation","Instances","instance","inserts","map","create","results","all","then","EC2","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,YAAD,CAAlC;;AAQA,MAAMC,QAAN,CAAc;AAIVC,EAAAA,WAAA,CAAYC,MAAZ,EAA0B;AAK1B,SAAAC,mBAAA,GAAsB,CAAC,GAAGC,EAAJ,KAAoB;AACtC,UAAIC,MAAM,GAAG;AAACC,QAAAA,OAAO,EAAE;AAAV,OAAb;AACAF,MAAAA,EAAE,CAACG,OAAH,CAAWC,IAAI,IAAG;AACdH,QAAAA,MAAM,CAACC,OAAP,CAAeG,IAAf,CAAoBD,IAApB;AACH,OAFD;AAGA,aAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACnC,aAAKC,GAAL,CAASC,iBAAT,CAA2BT,MAA3B,EAAmC,CAACU,GAAD,EAAMC,IAAN,KAAc;AAC7C,cAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN;;AACT,cAAGC,IAAI,CAACC,YAAL,CAAkBC,MAAlB,GAA2B,CAA9B,EAAiC;AAC7B,gBAAIC,SAAS,GAAG,EAAhB;AACAH,YAAAA,IAAI,CAACC,YAAL,CAAkBV,OAAlB,CAA0Ba,WAAW,IAAG;AACpC,kBAAGA,WAAW,CAACC,SAAZ,CAAsBH,MAAtB,GAA+B,CAAlC,EAAqC;AACjCE,gBAAAA,WAAW,CAACC,SAAZ,CAAsBd,OAAtB,CAA8Be,QAAQ,IAAG;AACrCH,kBAAAA,SAAS,CAACV,IAAV,CAAea,QAAf;AACH,iBAFD;AAGH,eAJD,MAIO;AACHV,gBAAAA,MAAM,CAAC,oBAAD,CAAN;AACH;AACJ,aARD;AASA,kBAAMW,OAAO,GAAGJ,SAAS,CAACK,GAAV,CAAc1B,kBAAkB,CAAC2B,MAAjC,CAAhB;AACA,kBAAMC,OAAO,GAAGhB,OAAO,CAACiB,GAAR,CAAYJ,OAAZ,CAAhB;AACAG,YAAAA,OAAO,CAACE,IAAR,CAAaZ,IAAI,IAAG;AAChBL,cAAAA,OAAO,CAACK,IAAD,CAAP;AACH,aAFD;AAGH,WAhBD,MAgBO;AACHJ,YAAAA,MAAM,CAAC,uBAAD,CAAN;AACH;AACJ,SArBD;AAsBH,OAvBM,CAAP;AAwBH,KA7BD;;AAJI,SAAKV,MAAL,GAAcA,MAAd;AACA,SAAKW,GAAL,GAAW,IAAIgB,WAAJ,CAAQ;AAAC,oBAAc,QAAf;AAAyB,gBAAU,KAAK3B;AAAxC,KAAR,CAAX;AACH;;AAPS;;AAyCd4B,MAAM,CAACC,OAAP,GAAiB/B,QAAjB","file":"topology.js","sourcesContent":["import { EC2 } from 'aws-sdk'\n\nconst instanceController = require('./instance')\n\ntype TagValue = [\n    {\n        Name: string,\n        Values: [string]\n    }\n]\nclass Topology {\n    region: string\n    ec2: EC2\n\n    constructor(region: string) {\n        this.region = region\n        this.ec2 = new EC2({'apiVersion': 'latest', 'region': this.region})\n    }\n\n    GetInstancesFromEC2 = (...kv: TagValue) => {\n        let params = {Filters: []}\n        kv.forEach(pair => {\n            params.Filters.push(pair)\n        })\n        return new Promise((resolve, reject) => {\n            this.ec2.describeInstances(params, (err, data) => {\n                if (err) reject(err)\n                if(data.Reservations.length > 0) {\n                    let instances = []\n                    data.Reservations.forEach(reservation => {\n                        if(reservation.Instances.length > 0) {\n                            reservation.Instances.forEach(instance => {\n                                instances.push(instance)\n                            })\n                        } else {\n                            reject('No Instances found')\n                        }\n                    })\n                    const inserts = instances.map(instanceController.create)\n                    const results = Promise.all(inserts)\n                    results.then(data => {\n                        resolve(data)\n                    })\n                } else {\n                    reject('No Reservations found')\n                }\n            })\n        })\n    }\n}\n\nmodule.exports = Topology"]}